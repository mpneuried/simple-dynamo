# # Config Module
#
# a collection of shared nsq methods

# **npm modules**
_isFunction = require( "lodash/isFunction" )
_isObject = require( "lodash/isObject" )
_isArray = require( "lodash/isArray" )
extend = require( "extend" )

# **internal modules**

DEFAULTS =
	# **AWS**
	# **SimpleDynamoManager.accessKeyId** *String* The general AWS access key
	accessKeyId: null
	# **SimpleDynamoManager.secretAccessKey** *String* The general AWS secret key
	secretAccessKey: null
	# **SimpleDynamoManager.region** *String* The AWS general region where your dynamo db is located
	region: "eu-east-1"
	
	# **MANAGER**
	# **SimpleDynamoManager.throughput** *Object* The default throughput configuration if a tabele is generated by simple-dynamo
	throughput:
		# **SimpleDynamoManager.throughput.read** *Number* The AWS-DynamoDB read throughput
		read: 5
		# **SimpleDynamoManager.throughput.write** *Number* The AWS-DynamoDB write throughput
		write: 5
	# **SimpleDynamoManager.overwriteExistingHash** *Boolean* Overwrite existing hashed by default
	overwriteExistingHash: false
	
	# **LOGGING**
	# **SimpleDynamoManager.logging** *Object* general logging configuration
	logging:
		severity: process.env[ "severity" ] or process.env[ "severity_simple_dynamo"] or "warning"
		severitys: "fatal,error,warning,info,debug".split( "," )

addGetter = ( prop, _get, context )->
	_obj =
		enumerable: true
		writable: true

	if _isFunction( _get )
		_obj.get = _get
	else
		_obj.value = _get
	Object.defineProperty( context, prop, _obj )
	return

class Config
	
	constructor: ( input )->
		for _k, _v of DEFAULTS
			addGetter( _k, _v, @ )
			
		@set( input )
		return
		
	set: ( key, value )=>
		if not key?
			return
		if _isObject( key )
			for _k, _v of key
				@set( _k, _v )
			return
		if _isObject( @[ key ] ) and _isObject( value ) and not _isArray( value )
			@[ key ] = extend( true, {}, @[ key ], value )
		else
			@[ key ] = value
		return

module.exports = Config
