// Generated by CoffeeScript 1.10.0
(function() {
  var DynamoManager, EventEmitter, Table, _, dynamo, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  dynamo = require("mp-dynamo");

  EventEmitter = require("events").EventEmitter;

  Table = require("./table");

  utils = require("./utils");

  _ = require("underscore");

  module.exports = DynamoManager = (function(superClass) {
    extend(DynamoManager, superClass);

    DynamoManager.prototype._connected = false;

    DynamoManager.prototype._fetched = false;

    DynamoManager.prototype.defaults = {
      throughput: {
        read: 10,
        write: 5
      },
      overwriteExistingHash: false
    };

    function DynamoManager(options, tableSettings) {
      var base;
      this.options = options;
      this.tableSettings = tableSettings;
      this.generate = bind(this.generate, this);
      this.generateAll = bind(this.generateAll, this);
      this._getTablesToGenerate = bind(this._getTablesToGenerate, this);
      this.has = bind(this.has, this);
      this.get = bind(this.get, this);
      this.list = bind(this.list, this);
      this._initTables = bind(this._initTables, this);
      this._fetchTables = bind(this._fetchTables, this);
      this._createClient = bind(this._createClient, this);
      this.connect = bind(this.connect, this);
      (base = this.options).scanWarning || (base.scanWarning = true);
      this._tables = {};
      this.__defineGetter__("fetched", (function(_this) {
        return function() {
          return _this._fetched;
        };
      })(this));
      this.__defineGetter__("connected", (function(_this) {
        return function() {
          return _this._connected;
        };
      })(this));
      return;
    }

    DynamoManager.prototype.connect = function(cb) {
      this._createClient((function(_this) {
        return function(err) {
          if (err) {
            cb(err);
          } else {
            _this._fetchTables(function(err) {
              if (err) {
                cb(err);
              } else {
                _this._initTables(void 0, cb);
              }
            });
          }
        };
      })(this));
    };

    DynamoManager.prototype._createClient = function(cb) {
      var _client, error, neededParams;
      this.client || (this.client = null);
      neededParams = ["accessKeyId", "secretAccessKey", "region"];
      if (utils.params(this.options, neededParams)) {
        _client = dynamo.createClient({
          accessKeyId: this.options.accessKeyId,
          secretAccessKey: this.options.secretAccessKey
        });
        this.client = _client.get(this.options.region);
        cb(null);
      } else {
        error = new Error;
        error.name = "missing-option";
        error.message = "Missing options vars. required options are: '" + (neededParams.join(', ')) + "'";
      }
    };

    DynamoManager.prototype._fetchTables = function(cb) {
      this.client.fetch((function(_this) {
        return function(err) {
          if (err) {
            cb(err);
          } else {
            _this._fetched = true;
            cb(null, true);
          }
        };
      })(this));
    };

    DynamoManager.prototype._initTables = function(tables, cb) {
      var _ext, _opt, error, ref, table, tableName;
      if (tables == null) {
        tables = this.tableSettings;
      }
      if (this.fetched) {
        for (tableName in tables) {
          table = tables[tableName];
          tableName = tableName.toLowerCase();
          if (this._tables[tableName] != null) {
            delete this._tables[tableName];
          }
          _ext = ((ref = table.combineTableTo) != null ? ref.length : void 0) ? this.client.tables[table.combineTableTo] : this.client.tables[table.name];
          _opt = _.extend({}, {
            manager: this,
            defaults: this.defaults,
            external: _ext
          });
          this._tables[tableName] = new Table(table, _opt);
          this.emit("new-table", tableName, this._tables[tableName]);
        }
        this._connected = true;
        cb(null);
      } else {
        error = new Error;
        error.name = "no-tables-fetched";
        error.message = "Currently not tables fetched. Please run `Manager.connect()` first.";
        cb(error);
      }
    };

    DynamoManager.prototype.list = function(cb) {
      this._fetchTables((function(_this) {
        return function(err) {
          if (err) {
            cb(err);
          } else {
            cb(null, Object.keys(_this._tables));
          }
        };
      })(this));
    };

    DynamoManager.prototype.get = function(tableName) {
      tableName = tableName.toLowerCase();
      if (this.has(tableName)) {
        return this._tables[tableName];
      } else {
        return null;
      }
    };

    DynamoManager.prototype.has = function(tableName) {
      tableName = tableName.toLowerCase();
      return this._tables[tableName] != null;
    };

    DynamoManager.prototype._getTablesToGenerate = function() {
      var _n, _ret, ref, tbl;
      _ret = {};
      ref = this._tables;
      for (_n in ref) {
        tbl = ref[_n];
        if (_ret[tbl.tableName] == null) {
          _ret[tbl.tableName] = {
            name: _n,
            tableName: tbl.tableName
          };
        }
      }
      return _ret;
    };

    DynamoManager.prototype.generateAll = function(cb) {
      var _n, aCreate, ref, table;
      aCreate = [];
      ref = this._getTablesToGenerate();
      for (_n in ref) {
        table = ref[_n];
        aCreate.push(_.bind(function(tableName, cba) {
          this.generate(tableName, (function(_this) {
            return function(err, generated) {
              cba(err, generated);
            };
          })(this));
        }, this, table.name));
      }
      utils.runSeries(aCreate, (function(_this) {
        return function(err, _generated) {
          if (utils.checkArray(err)) {
            cb(err);
          } else {
            _this.emit("all-tables-generated");
            cb(null);
          }
        };
      })(this));
    };

    DynamoManager.prototype.generate = function(tableName, cb) {
      var error, tbl;
      tbl = this.get(tableName);
      if (!tbl) {
        error = new Error;
        error.name = "table-not-found";
        error.message = "Table `" + tableName + "` not found.";
        cb(error);
      } else {
        tbl.generate((function(_this) {
          return function(err, generated) {
            if (err) {
              cb(err);
              return;
            }
            _this.emit("table-generated", generated);
            cb(null, generated);
          };
        })(this));
        return;
      }
    };

    return DynamoManager;

  })(EventEmitter);

}).call(this);
